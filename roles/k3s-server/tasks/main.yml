---
- name: Check if K3s is already running
  ansible.builtin.systemd:
    name: k3s
  register: k3s_status
  changed_when: false

- name: Install k3s server binaries
  when: k3s_status.status != 'running'
  ansible.builtin.command:
    cmd: /usr/local/bin/k3s-install.sh
  environment:
    INSTALL_K3S_SKIP_START: "true"
    INSTALL_K3S_VERSION: "{{ k3s_version }}"
  changed_when: true

- name: Install Ansible K3S dependencies
  block:
    - name: Install pip
      ansible.builtin.package:
        name: python3-pip
        state: present
    - name: Install Ansible dependencies
      ansible.builtin.shell:
        cmd: pip install --break-system-packages \
          pyyaml \
          kubernetes
      changed_when: false
  rescue:
    - name: '[WARNING] Failed to install Ansible dependencies'
      ansible.builtin.debug:
        msg: 'Failed to install Ansible dependencies, check logs'

- name: Create k3s group
  ansible.builtin.group:
    name: k3s
    state: present

- name: Add ansible and devops user to k3s group
  ansible.builtin.user:
    name: "{{ item }}"
    groups: k3s
    append: true
  loop:
    - ansible
    - devops
  failed_when: false

- name: Create k3s directory
  ansible.builtin.file:
    path: /etc/rancher/k3s
    state: directory
    owner: root
    group: k3s
    mode: '0755'

- name: Create k3s config file
  ansible.builtin.template:
    src: config.yaml.j2
    dest: /etc/rancher/k3s/config.yaml
    owner: root
    group: k3s
    mode: '0640'

- name: Create k3s config directory
  ansible.builtin.file:
    path: /etc/rancher/k3s/config.yaml.d
    state: directory
    owner: root
    group: k3s
    mode: '0640'

- name: Init first k3s server
  when: inventory_hostname == managers[0].name
  block:
    - name: Create k3s config-init config yaml
      ansible.builtin.template:
        src: config-init.yaml.j2
        dest: /etc/rancher/k3s/config.yaml.d/init.yaml
        owner: root
        group: k3s
        mode: '0640'

    - name: Setup k3s if not running
      when: k3s_status.status != 'running'
      block:
        - name: Copy k3s service file [HA]
          ansible.builtin.template:
            src: k3s.service.j2
            dest: /etc/systemd/system/k3s.service
            owner: root
            group: root
            mode: '0644'

        - name: Enable and check K3s service
          ansible.builtin.systemd:
            name: k3s
            daemon_reload: true
            state: started
            enabled: true

        - name: Verify that all server nodes joined
          ansible.builtin.command:
            cmd: >
              k3s kubectl get nodes -l "node-role.kubernetes.io/control-plane=true" -o=jsonpath="{.items[*].metadata.name}"
          register: nodes
          until: nodes.rc == 0 and (nodes.stdout.split() | length) >= 1
          retries: 20
          delay: 5
          changed_when: false

- name: Get server token file
  delegate_to: "{{ managers[0].name }}"
  ansible.builtin.fetch:
    src: /var/lib/rancher/k3s/server/token
    dest: "{{ k3s_token_file }}"
    flat: true

- name: Get agent token file
  delegate_to: "{{ managers[0].name }}"
  ansible.builtin.fetch:
    src: /var/lib/rancher/k3s/server/agent-token
    dest: "{{ k3s_agent_token_file }}"
    flat: true

- name: Start other servers
  when:
    - managers | length > 1
    - inventory_hostname != managers[0].name
  block:
    - name: Create k3s config-ha config yaml
      vars:
        k3s_token: "{{ lookup('ansible.builtin.file', k3s_token_file) }}"
        k3s_agent_token: "{{ lookup('ansible.builtin.file', k3s_agent_token_file) }}"
      ansible.builtin.template:
        src: config-ha.yaml.j2
        dest: /etc/rancher/k3s/config.yaml.d/ha.yaml
        owner: root
        group: root
        mode: '0640'

    - name: Setup k3s if not running
      when: k3s_status.status != 'running'
      block:
        - name: Copy k3s service file [HA]
          ansible.builtin.template:
            src: k3s.service.j2
            dest: /etc/systemd/system/k3s.service
            owner: root
            group: root
            mode: '0644'

        - name: Enable and check K3s service
          ansible.builtin.systemd:
            name: k3s
            daemon_reload: true
            state: started
            enabled: true

    - name: Verify that all server nodes joined
      when: (managers | length) > 1
      ansible.builtin.command:
        cmd: >
          k3s kubectl get nodes -l "node-role.kubernetes.io/control-plane=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (managers | length)
      retries: 20
      delay: 5
      changed_when: false
