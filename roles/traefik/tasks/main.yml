---
- name: Create Namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ namespace }}"

- name: Create LimitRange
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: LimitRange
      metadata:
        name: traefik-limits
        namespace: "{{ namespace }}"
      spec:
        limits:
          - defaultRequest:
              memory: 128Mi
              cpu: 100m
            default:
              memory: 2Gi
              cpu: 1000m
            max:
              memory: 4Gi
              cpu: 2000m
            min:
              memory: 16Mi
              cpu: 50m
            type: Container

- name: Create Traefik Ingress Certificate
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: traefik-local-wildcard
        namespace: "{{ namespace }}"
      spec:
        secretName: traefik-local-wildcard-tls
        dnsNames:
          - "{{ cluster_domain }}"
          - "{{ local_domain }}"
        issuerRef:
          name: letsencrypt-prod
          kind: ClusterIssuer
        renewBefore: 720h
        duration: 9480h

- name: Install helm chart
  kubernetes.core.helm_repository:
    name: traefik
    repo_url: https://traefik.github.io/charts
    state: present

- name: Deploy Traefik with helm
  kubernetes.core.helm:
    name: traefik
    state: present
    namespace: "{{ namespace }}"
    chart_ref: traefik/traefik
    values:
      additionalArguments:
        - --tcpserverstransport.tls.insecureskipverify
      additionalVolumeMounts:
        - name: localtime
          mountPath: /etc/localtime
          readOnly: true
        - name: logs
          mountPath: /var/log/traefik
      deployment:
        replicas: 3
        labels:
          app: traefik
        additionalVolumes:
          - name: localtime
            hostPath:
              path: /etc/localtime
          - name: logs
            emptyDir: {}
      ingressRoute:
        dashboard:
          enabled: true
        healthcheck:
          enabled: true
      updateStrategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - traefik
              topologyKey: kubernetes.io/hostname
      logs:
        general:
          noColor: true
        access:
          enabled: true
          filePath: /var/log/traefik/access.log
          bufferingSize: 100
          fields:
            headers:
              defaultmode: redact
      nodeSelector:
        kubernetes.io/role: worker
      persistence:
        enabled: true
        accessMode: ReadWriteMany
      ports:
        web:
          entryPoint:
            to: websecure
            scheme: https
            permanent: true
      providers:
        kubernetesCRD:
          enabled: true
        kubernetesIngress:
          enabled: true
      resources:
        requests:
          cpu: 50m
          memory: 128Mi
        limits:
          cpu: 1000m
          memory: 2Gi
      service:
        annotations:
          metallb.universe.tf/allow-shared-ip: traefik
          metallb.universe.tf/loadBalancerIPs: "{{ ingress_ip }}"
      tlsStore:
        default:
          defaultCertificate:
            secretName: traefik-local-wildcard-tls

- name: Create Traefik Network Policy
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: cilium.io/v2
      kind: CiliumNetworkPolicy
      metadata:
        name: traefik-network-policy
        namespace: "{{ namespace }}"
      spec:
        endpointSelector:
          matchLabels:
            app: traefik
        ingress:
          - fromCIDR:
              - 10.0.0.0/8
            toPorts:
              - ports:
                  - port: "8000"
                    protocol: TCP
                  - port: "8080"
                    protocol: TCP
                  - port: "8443"
                    protocol: TCP
          - fromEndpoints:
              - matchLabels:
                  name: prometheus
                  namespace: prometheus
                  component: server
            toPorts:
              - ports:
                  - port: "9100"
                    protocol: TCP
        egress:
          - toEntities:
              - cluster

- name: Create Longhorn Ingress
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: longhorn
        namespace: longhorn-system
        labels:
          app: longhorn-ui
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          cert-manager.io/cluster-issuer: letsencrypt-prod
          cert-manager.io/duration: 9480h
          cert-manager.io/renew-before: 720h
      spec:
        rules:
          - host: longhorn.{{ cluster_domain }}
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: longhorn-frontend
                      port:
                        number: 80
          - host: longhorn.{{ cluster_domain }}
        tls:
          - hosts:
              - longhorn.{{ cluster_domain }}
            secretName: longhorn-http-proxy-tls
