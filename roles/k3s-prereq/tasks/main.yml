---
- name: Enable cgroup via cmdline.txt
  when: pi
  ansible.builtin.lineinfile:
    path: /boot/firmware/cmdline.txt
    backrefs: true
    regexp: '^((?!.*\bcgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory\b).*)$'
    line: '\1 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory'
  notify: Reboot

- name: Enable cgroup via grub
  become: true
  when: not (pi | default(false))
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    backrefs: true
    regexp: 'GRUB_CMDLINE_LINUX="((?!.*\bcgroup_enable=memory cgroup_memory=1\b).*)"'
    line: 'GRUB_CMDLINE_LINUX="\1 cgroup_enable=memory cgroup_memory=1"'
  notify: update grub

- name: Disable swap
  become: true
  ansible.builtin.command: swapoff -a

- name: Get k3s installed version
  ansible.builtin.command: k3s --version
  register: k3s_version_output
  changed_when: false
  ignore_errors: true

- name: Set k3s installed version
  when: k3s_version_output.rc == 0
  ansible.builtin.set_fact:
    installed_k3s_version: "{{ k3s_version_output.stdout_lines[0].split(' ')[2] }}"

- name: Download artifact only if needed
  when: k3s_version_output.rc != 0
  ansible.builtin.get_url:
    url: https://get.k3s.io/
    timeout: 120
    dest: /usr/local/bin/k3s-install.sh
    owner: root
    group: root
    mode: 0755

- name: Add k3s vip host entry
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ k3s_vip_address }} {{ cluster_domain }}"
    state: present
    validate: "grep -q {{ k3s_vip_address }} /etc/hosts"

- name: Check for cloud init file
  ansible.builtin.lineinfile:
    path: /etc/cloud/templates/hosts.debian.tmpl
    line: "{{ k3s_vip_address }} {{ cluster_domain }}"
    state: present
    validate: "grep -q {{ k3s_vip_address }} /etc/cloud/templates/hosts.debian.tmpl"
  when: ansible_distribution == "Debian"